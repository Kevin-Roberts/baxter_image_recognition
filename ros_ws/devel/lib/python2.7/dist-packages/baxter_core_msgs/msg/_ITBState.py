"""autogenerated by genpy from baxter_core_msgs/ITBState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ITBState(genpy.Message):
  _md5sum = "fd86ad89da05230247c94b4d8e7ed306"
  _type = "baxter_core_msgs/ITBState"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool[4] buttons
bool    up
bool    down
bool    left
bool    right
uint8   wheel

# true if the inner light is on, false if not
bool innerLight

# true if the outer light is on, false if not
bool outerLight

"""
  __slots__ = ['buttons','up','down','left','right','wheel','innerLight','outerLight']
  _slot_types = ['bool[4]','bool','bool','bool','bool','uint8','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       buttons,up,down,left,right,wheel,innerLight,outerLight

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ITBState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.buttons is None:
        self.buttons = [False,False,False,False]
      if self.up is None:
        self.up = False
      if self.down is None:
        self.down = False
      if self.left is None:
        self.left = False
      if self.right is None:
        self.right = False
      if self.wheel is None:
        self.wheel = 0
      if self.innerLight is None:
        self.innerLight = False
      if self.outerLight is None:
        self.outerLight = False
    else:
      self.buttons = [False,False,False,False]
      self.up = False
      self.down = False
      self.left = False
      self.right = False
      self.wheel = 0
      self.innerLight = False
      self.outerLight = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_4B.pack(*self.buttons))
      _x = self
      buff.write(_struct_7B.pack(_x.up, _x.down, _x.left, _x.right, _x.wheel, _x.innerLight, _x.outerLight))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      self.buttons = _struct_4B.unpack(str[start:end])
      self.buttons = map(bool, self.buttons)
      _x = self
      start = end
      end += 7
      (_x.up, _x.down, _x.left, _x.right, _x.wheel, _x.innerLight, _x.outerLight,) = _struct_7B.unpack(str[start:end])
      self.up = bool(self.up)
      self.down = bool(self.down)
      self.left = bool(self.left)
      self.right = bool(self.right)
      self.innerLight = bool(self.innerLight)
      self.outerLight = bool(self.outerLight)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.buttons.tostring())
      _x = self
      buff.write(_struct_7B.pack(_x.up, _x.down, _x.left, _x.right, _x.wheel, _x.innerLight, _x.outerLight))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      self.buttons = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=4)
      self.buttons = map(bool, self.buttons)
      _x = self
      start = end
      end += 7
      (_x.up, _x.down, _x.left, _x.right, _x.wheel, _x.innerLight, _x.outerLight,) = _struct_7B.unpack(str[start:end])
      self.up = bool(self.up)
      self.down = bool(self.down)
      self.left = bool(self.left)
      self.right = bool(self.right)
      self.innerLight = bool(self.innerLight)
      self.outerLight = bool(self.outerLight)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4B = struct.Struct("<4B")
_struct_7B = struct.Struct("<7B")
