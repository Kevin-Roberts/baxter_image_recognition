"""autogenerated by genpy from baxter_core_msgs/OpenCameraRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import baxter_core_msgs.msg

class OpenCameraRequest(genpy.Message):
  _md5sum = "c4194eee32741c5a98ef8da9666fa6c9"
  _type = "baxter_core_msgs/OpenCameraRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string          name
CameraSettings  settings

================================================================================
MSG: baxter_core_msgs/CameraSettings
int32           width
int32           height
float32         fps
CameraControl[] controls

================================================================================
MSG: baxter_core_msgs/CameraControl
int32   id
int32   value

int32 CAMERA_CONTROL_EXPOSURE=100
int32 CAMERA_CONTROL_GAIN=101
int32 CAMERA_CONTROL_WHITE_BALANCE_R=102
int32 CAMERA_CONTROL_WHITE_BALANCE_G=103
int32 CAMERA_CONTROL_WHITE_BALANCE_B=104
int32 CAMERA_CONTROL_WINDOW_X=105
int32 CAMERA_CONTROL_WINDOW_Y=106
int32 CAMERA_CONTROL_FLIP=107
int32 CAMERA_CONTROL_MIRROR=108
int32 CAMERA_CONTROL_RESOLUTION_HALF=109

"""
  __slots__ = ['name','settings']
  _slot_types = ['string','baxter_core_msgs/CameraSettings']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       name,settings

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(OpenCameraRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.name is None:
        self.name = ''
      if self.settings is None:
        self.settings = baxter_core_msgs.msg.CameraSettings()
    else:
      self.name = ''
      self.settings = baxter_core_msgs.msg.CameraSettings()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2if.pack(_x.settings.width, _x.settings.height, _x.settings.fps))
      length = len(self.settings.controls)
      buff.write(_struct_I.pack(length))
      for val1 in self.settings.controls:
        _x = val1
        buff.write(_struct_2i.pack(_x.id, _x.value))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.settings is None:
        self.settings = baxter_core_msgs.msg.CameraSettings()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.settings.width, _x.settings.height, _x.settings.fps,) = _struct_2if.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.settings.controls = []
      for i in range(0, length):
        val1 = baxter_core_msgs.msg.CameraControl()
        _x = val1
        start = end
        end += 8
        (_x.id, _x.value,) = _struct_2i.unpack(str[start:end])
        self.settings.controls.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2if.pack(_x.settings.width, _x.settings.height, _x.settings.fps))
      length = len(self.settings.controls)
      buff.write(_struct_I.pack(length))
      for val1 in self.settings.controls:
        _x = val1
        buff.write(_struct_2i.pack(_x.id, _x.value))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.settings is None:
        self.settings = baxter_core_msgs.msg.CameraSettings()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.settings.width, _x.settings.height, _x.settings.fps,) = _struct_2if.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.settings.controls = []
      for i in range(0, length):
        val1 = baxter_core_msgs.msg.CameraControl()
        _x = val1
        start = end
        end += 8
        (_x.id, _x.value,) = _struct_2i.unpack(str[start:end])
        self.settings.controls.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2if = struct.Struct("<2if")
_struct_2i = struct.Struct("<2i")
"""autogenerated by genpy from baxter_core_msgs/OpenCameraResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class OpenCameraResponse(genpy.Message):
  _md5sum = "b6e094011a4dfaee5eddf447220446cf"
  _type = "baxter_core_msgs/OpenCameraResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32           err


"""
  __slots__ = ['err']
  _slot_types = ['int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       err

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(OpenCameraResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.err is None:
        self.err = 0
    else:
      self.err = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_i.pack(self.err))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (self.err,) = _struct_i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_i.pack(self.err))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (self.err,) = _struct_i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i = struct.Struct("<i")
class OpenCamera(object):
  _type          = 'baxter_core_msgs/OpenCamera'
  _md5sum = '73eacff63d5f9cca2d986614515a5c8c'
  _request_class  = OpenCameraRequest
  _response_class = OpenCameraResponse
